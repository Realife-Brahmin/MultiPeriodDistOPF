using JuMP,Ipopt,OdsIO,MathOptInterface,Juniper,Plots, LinearAlgebra, Dates, CPLEX, Cbc

#-------------------Accessing current folder directory--------------------------
println(pwd());
cd(dirname(@__FILE__))
println(pwd());
#------------------  Reading input data file -----------------------------------
include("optimal_power_flow_milp/ac_power_flow_func.jl")
include("optimal_power_flow_milp/ac_power_flow_model.jl")

include("optimal_power_flow_milp/data_nw_functions.jl")                          # Transformer data file is indepdendant of multi-period and scenarios
include("optimal_power_flow_milp/power_flow_funcitons_milp.jl")
include("optimal_power_flow_milp/loop_finding.jl")
include("optimal_power_flow_milp/opf_functions.jl")
include("optimal_power_flow_milp/sql_loop.jl")
include("optimal_power_flow_milp/sql_opf_model.jl")
include("optimal_power_flow_milp/opf_model_sub_functions.jl")
include("optimal_power_flow_milp/model_sol_recovery.jl")

include("optimal_power_flow_milp/data_nw_functions_pf.jl")                         # Transformer data file is indepdendant of multi-period and scenarios
include("optimal_power_flow_milp/non_linear_power_equations.jl")
include("optimal_power_flow_milp/ac_power_flow_model_opf.jl")
include("optimal_power_flow_milp/ac_power_flow_opf_functions.jl")

################################################################################
######################  Select the Input file ##################################
################################################################################
filename = "input_data/uk_dx_01_2020.ods"
# filename = "input_data/pt_dx_01_2020.ods"
## -------------------- Reading Common Julia Files -----------------------------
tso_dso = 0
include("common/data_types.jl")                                                  # Reading the structure of network related fields
include("common/data_reader.jl")                                                 # Function setting the data corresponding to each network quantity
if tso_dso == 0
    include("common/interface_excel.jl")                                             # Program saving all the inforamtion related to each entity of a power system
elseif tso_dso == 1
    include("common/interface_excel_tso_dso.jl")
end

filename = "input_data/scenario_gen.ods"                                         # Reading Scenario files generated by Scenario Generation Tool Box
include("common/interface_scenarios.jl")

## -------------------- Constants Declaration --------------------------------##
###--------- (To be used in power flo and optimal power flow model) ----------
include("common/constants_pf_opf.jl")
## ------------- Flexibility Options ------------------------------------######
flex_apc  = 1
flex_oltc = 1
oltc_bin  = 1
flex_adpf = 1
flex_fl   = 1
fl_bin    = 1
flex_str  = 1
str_bin   = 1

solver_ipopt  = 0
solver_cbc    = 0
solver_bonmin = 0
solver_cplex  = 1

rcvr_branch   = 1
rcvr_inj      = 1
rcvr_tso_dso  = 0

stoch_model = 1
## ------------------------------- Network Data ---------------------------#####
(idx_from_line, idx_to_line, yij_line,yij_line_sh,tap_ratio,tap_ratio_min,tap_ratio_max,nTrsf,dLines) = data_lines(array_lines,nw_lines,nLines)
idx_tap  = data_trsf(dLines)
dLines   = [dLines idx_tap]

node_data  = data_nodes(nBus,nw_buses,idx_from_line,idx_to_line,yij_line,yij_line_sh,tap_ratio,tap_ratio_min,tap_ratio_max,idx_tap,node)
(tdata,itap_tr,itap_0) = data_trsf_tap(node_data)
itap_r  = data_trsf_tap_index(tdata,itap_tr,itap_0)

itap    = union(itap_tr,setdiff(itap_0,itap_r))
tdata   = tdata[itap,:]

(trsf_fict_nodes,tap_ratio_range,tratio_init) = fictitious_trsf_node(tap_ratio,rdata_buses,nw_lines,n_tap,tdata)

(cfl_inc,cfl_dec,cost_load_inc,cost_load_dec,bus_data_lsheet,idx_Gs_lsheet,idx_Bs_lsheet,idx_St_lsheet,nFl,iFl,nd_fl) = data_load(nw_loads,rheader_loads,rdata_loads,nLoads,nTP,nSc,sbase)
(bus_data_gsheet,i_ncurt_gens,i_curt_gens,nNcurt_gen,nCurt_gen,nd_ncurt_gen,nd_curt_gen,Pg_max,Pg_min,Qg_max,Qg_min,cA_gen,cB_gen,cC_gen) = data_gen(nw_gens,nw_gcost,rheader_gens,rdata_gens,nGens,nTP)

(bus_data_Ssheet,bus_data_Strcost,idx_St_Strsheet,iStr_active,nStr_active,nd_Str_active,cA_str,cB_str,cC_str,cost_a_str,cost_b_str,cost_c_str) = data_storage(rheader_storage,rdata_storage,nw_storage,nw_Strcost,nTP,nSc,sbase)

(p_load,q_load,pg_max,pg_min,qg_max,qg_min,cost_a_gen,cost_b_gen,cost_c_gen) = data_load_gen(nLoads,nGens,nTP,nSc,bus_data_lsheet,bus_data_gsheet,Pg_max,Pg_min,Qg_max,Qg_min,nw_pPrf_data_load,nw_qPrf_data_load,nw_pPrf_data_gen_max,nw_pPrf_data_gen_min,nw_qPrf_data_gen_max,nw_qPrf_data_gen_min,nw_loads,sbase,scenario,scenario_data_p_max,scenario_data_p_min,scenario_data_q_max,scenario_data_q_min,cA_gen,cB_gen,cC_gen)

graph = rdata_lines[:,1:2]
graph = convert.(Int64,graph)
cycleList = cycles_finding(graph,numCycles,cycles)                               # Loop finding Code
oltc_ratio  = zeros(Float64,(nSc,nTP,nTrsf))

## -------------------------- AC Power Flow ---------------------------------###
# vol_nodes_mag_pf   = zeros(nSc_pf,nTP_pf,size(nw_buses,1))
# vol_nodes_theta_pf = zeros(nSc_pf,nTP_pf,size(nw_buses,1))
##-----------------Scheme to run different types of AC-Power Flow ----------####
# 1. Deterministic SP: scenario = 0, nSc_pf = 1, nTP_pf = 1
# 2. Deterministic MP: scenario = 0, nSc_pf = 1, nTP_pf = 24
# 3. Stochastic MP (Avg): scenario = 1, nSc_pf = 1, nTP_pf = 24
# 4. Stochastic MP (Full): scenario = 1, nSc_pf = 10, nTP_pf = 24
# 5. Stochastic SP is not programmed
##------------------------------------------------------------------------------
idx_curt_dg = zeros(size(i_curt_gens,1))
for i in 1:size(i_curt_gens,1)
idx_curt_dg[i,1] = i_curt_gens[i][1]
end
idx_curt_dg = convert.(Int64,idx_curt_dg)
p_curt_pf = zeros(nSc_pf,nTP_pf,nCurt_gen)./sbase
p_dis_pf  = zeros(nSc_pf,nTP_pf,nStr_active)./sbase
p_ch_pf   = zeros(nSc_pf,nTP_pf,nStr_active)./sbase
p_od_pf   = zeros(nSc_pf,nTP_pf,nFl)./sbase
p_ud_pf   = zeros(nSc_pf,nTP_pf,nFl)./sbase
q_dg_pf   = tan(acos(dg_ac_pf)).*(pg_max[:,:,idx_curt_dg]-p_curt_pf)
oltc_tap_init = tratio_init

vm_ac     = zeros(nBus,nTP,nSc)
va_ac     = zeros(nBus,nTP,nSc)

display("Initial AC-Power Flow before MILP Model")
# println("Initial AC-Power Flow before MILP Model")
(vol_nodes_mag_pf,vol_nodes_theta_pf,vol_rect_pf,idx_slack_bus_pf,p_gen_node_pf,q_gen_node_pf,ac_pf_con)= ac_power_flow_model(slack_bus_type,vol_ctrl_bus_type,load_bus_type,rdata_buses,rdata_loads,rdata_gens,rdata_storage,
nw_pPrf_data_load,nw_qPrf_data_load,nw_pPrf_data_gen_max,nw_qPrf_data_gen_max,scenario_data_p_min,scenario_data_p_max,
scenario_data_q_min,scenario_data_q_max,nw_buses_pf,nw_lines_pf,nw_loads_pf,nw_gens_pf,nw_gcost_pf,nw_sbase_pf,v_initial_pf,
v_mag_pf,v_angle_pf,max_mismatch_pf,epsilon,iteration,itr_max,ordata_buses_pf,p_curt_pf,p_dis_pf,p_ch_pf,p_od_pf,p_ud_pf,load_theta,
nd_curt_gen,nd_fl,nd_Str_active,dg_ac_pf,q_dg_pf,flex_adpf,tratio_init,flex_oltc,term_status,vm_ac,va_ac)

(br_crnt_pu_pf_int,br_crnt_si_pf_int,br_pwr_pu_pf_int,br_pwr_si_pf_int) = recovery_branch_current_pf(nSc,nTP,nLines,nw_lines_pf,vol_rect_pf,yij_line,Ibase,sbase,ybase,vbase,oltc_tap_init)

(vol_viol_int,crnt_viol_int,max_vol_viol_int,max_crnt_viol_int,viol_nodes_int,nVol_viol_int,avg_vol_viol_int,above_avg_vol_viol_int,below_avg_vol_viol_int,
nCrnt_viol_int,avg_crnt_viol_int,above_avg_crnt_viol_int,below_avg_crnt_viol_int,vol_viol_cn_lin_int) =
constraint_violation_pf(nBus,nw_buses,nLines,nw_lines,nTP,nSc,vol_nodes_mag_pf,br_crnt_si_pf_int,I_rat,1)

if !isempty(max_vol_viol_int)
    vol_viol_max_int  = maximum(max_vol_viol_int)
    vol_viol_less_tol = size(findall(x->x<=1,max_vol_viol_int),1)
else
    vol_viol_max_int = 0.001
    vol_viol_less_tol = 0.0
end

if !isempty(max_crnt_viol_int)
    crnt_viol_max_int      = maximum(max_crnt_viol_int)
    crnt_viol_less_tol = size(findall(x->x<=1,max_crnt_viol_int),1)
else
    crnt_viol_max_int = 0.001
    crnt_viol_less_tol = 0.0
end
# Number Max Avg Above_Avg Below_Avg Less than 1%
vol_viol_nw_int  = [nVol_viol_int  vol_viol_max_int  avg_vol_viol_int  above_avg_vol_viol_int  below_avg_vol_viol_int vol_viol_less_tol]
crnt_viol_nw_int = [nCrnt_viol_int crnt_viol_max_int avg_crnt_viol_int above_avg_crnt_viol_int below_avg_crnt_viol_int crnt_viol_less_tol]

slack_nd = convert.(Int64,rdata_buses[idx_slack_bus_pf,1])
slack_nd = slack_nd[1,1]

idx_slack_from = findall(x->x==slack_nd,rdata_lines[:,1])
idx_slack_to   = findall(x->x==slack_nd,rdata_lines[:,2])

num_slack_cnctd_nodes = size(idx_slack_from,1)+size(idx_slack_to,1)              # Number of nodes connecred to the slack = Number of times slack appear in the From and To columns
to_nodes   = convert.(Int64,rdata_lines[idx_slack_from,2])
from_nodes = convert.(Int64,rdata_lines[idx_slack_to,1])
slack_cnctd_nodes = vcat(to_nodes,from_nodes)
slack_cnctd_nodes = vcat(slack_nd,slack_cnctd_nodes)
br_crnt_si_pf_cnv    = zeros(nSc,nTP,nLines)

(vol_viol_nw,vol_viol_nw_max,crnt_viol_nw,crnt_viol_nw_max,vol_nodes_pf_cnv,vol_nodes_ang_pf_cnv,br_crnt_si_pf_cnv,sql_obj,sql_time,rel_max_error,rel_avg_error,norm_s_err_max_power,norm_s_err_avg,
p_curt_gen,q_curt_gen,total_p_curt,str_dis,str_ch,viol_nodes_new,p_curt_lin,min_vol_limit,max_vol_limit,oltc_ratio,p_err_max_power,q_err_max_power,vm_ac,va_ac,vol_viol_cn_milp,model_infs,br_crnt_opf_app,br_crnt_opf_ex,
p_res_curt_op,q_res_op,fl_inc_op,fl_dec_op,p_ch_op,p_dis_op,p_strg_op) = sql_loop(vol_viol_max,vol_viol_tol,crnt_viol_max,crnt_viol_tol,lin_itr,lin_itr_max,vol_nodes_mag_pf,vol_nodes_theta_pf,nSc,nTP,nBus,nNcurt_gen,nCurt_gen,nTrsf,nStr_active,nFl,nd_fl,flex_apc,flex_oltc,
flex_adpf,flex_str,flex_fl,str_bin,fl_bin,rdata_buses,nLines,trsf_fict_nodes,tap_ratio_range,oltc_bin,prob_scs,time_step,tdata,bus_data_Ssheet,bus_data_lsheet,cost_a_str,cost_b_str,cost_c_str,cost_load_inc,
cost_load_dec,nw_buses,rdata_loads,node_data,nd_curt_gen,nd_ncurt_gen,p_load,q_load,idx_Gs_lsheet,idx_Bs_lsheet,pg_max,yii_sh,i_curt_gens,sbase,dg_pf,iStr_active,yij_line,dLines,i_ncurt_gens,nw_lines,bus_data_gsheet,
pg_min,qg_min,qg_max,pgen_tol,qgen_tol,p_tol,q_tol,rcvr_branch,rcvr_inj,rcvr_tso_dso,Ibase,idx_slack_bus_pf,solver_ipopt,solver_cbc,solver_bonmin,sql_itr,sql_itr_max,s_inj_error_rel,s_error_tol,angle_lb,angle_ub,
cycleList,idx_slack_from,idx_slack_to,num_slack_cnctd_nodes,slack_cnctd_nodes,slack_nd,stoch_model,tratio_init,rdata_storage,load_theta,nd_Str_active,slack_bus_type,vol_ctrl_bus_type,load_bus_type,
rdata_gens,nw_pPrf_data_load,nw_qPrf_data_load,nw_pPrf_data_gen_max,nw_qPrf_data_gen_max,scenario_data_p_min,scenario_data_p_max,scenario_data_q_min,scenario_data_q_max,nw_buses_pf,nw_lines_pf,nw_loads_pf,nw_gens_pf,
nw_gcost_pf,nw_sbase_pf,v_initial_pf,v_mag_pf,v_angle_pf,max_mismatch_pf,epsilon,iteration,itr_max,ordata_buses_pf,ybase,vbase,I_rat,vol_viol_nw,vol_viol_nw_max,crnt_viol_nw,crnt_viol_nw_max,min_vol_limit,max_vol_limit,max_crnt_limit,term_status,vol_cstr_tol,br_crnt_si_pf_cnv,solver_cplex)

################################################################################
######################### Outpur Data to ICENT Tools ###########################
################################################################################

avg_p_gen_curt = reshape(sum(prob_scs.*p_res_curt_op,dims=1),(nTP,nCurt_gen))
avg_q_gen_curt = reshape(sum(prob_scs.*q_res_op,dims=1),(nTP,nCurt_gen))

avg_p_gen_curt = permutedims(avg_p_gen_curt)
avg_q_gen_curt = permutedims(avg_q_gen_curt)

avg_fl_inc   = prob_scs.*fl_inc_op
avg_fl_dec   = prob_scs.*fl_dec_op

avg_p_ch_nd  = prob_scs.*p_ch_op
avg_p_dch_nd = prob_scs.*p_dis_op
avg_strg_nd  = prob_scs.*p_strg_op

sc_op = 10                      # Data for the most probable scenario is used/passed to the ICENT tool
avg_fl_inc_op  = permutedims(avg_fl_inc[sc_op,:,:])
avg_fl_dec_op  = permutedims(avg_fl_dec[sc_op,:,:])

avg_p_ch_op    = permutedims(avg_p_ch_nd[sc_op,:,:])
avg_p_dch_op   = permutedims(avg_p_dch_nd[sc_op,:,:])

################################################################################
